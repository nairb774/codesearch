syntax = "proto3";

option go_package = "github.com/nairb774/codesearch/cmd/cindex-serve/service";

package codesearch;

message Doc {
  uint32 id = 1;
  string path = 2;

  repeated Snippet snippets = 3;
}

message Snippet {
  // One or more lines, separated by '\n' containing matching results.
  string lines = 1;

  // Line number of the first line in the snippet.
  uint32 first_line = 2;

  // Pairs of byte offsets indicating matches.
  repeated uint32 matches = 3;
}

message SearchShardRequest {
  // Required.
  string shard_id = 1;
  // Required.
  bytes shard_sha256 = 2;
  string expression = 3;
}

message SearchShardResponse {
  repeated Doc docs = 1;

  // matches contains either the total number of docs that matched (if the
  // number == len(docs)) or the possible number of matches. Were all possible
  // docs to be inspected.
  uint32 matches = 2;

  // Indicates the number of docs inspected to return the results.
  uint32 docs_inspected = 3;
}

service SearchShardService {
  rpc SearchShard(SearchShardRequest) returns (SearchShardResponse) {}
}

message RepoRef {
  string repo_name = 1;
  string ref = 2;
  string commit_hash = 3;
  Shard shard = 4;
}

// Shard represents an index shard.
message Shard {
  string id = 1;

  string tree_hash = 2;

  State state = 3;
  enum State {
    UNKNOWN = 0;

    // The shard has been allocated, but has not yet been marked as done being
    // created. The actual contents of the shard may not exist, or may be
    // incomplete.
    CREATING = 1;

    // The shard has been completed, and is not being used by any repositories.
    // Shards in the UNREFERENCED state may be garbage collected.
    UNREFERENCED = 2;

    // The shard is referenced by one or more repoositories. The shard should
    // not be deleted.
    REFERENCED = 3;

    // The shard is going through the process of being removed.
    DELETING = 4;
  }

  // The size is only valid when the shard is not in the CREATING state.
  uint64 size = 4;

  // The hash is only valid when the shard is not in the CREATING state.
  bytes sha256 = 5;
}

message AllocateShardRequest {
}

message AllocateShardResponse {
  // The current state of the newly allocated shard.
  Shard shard = 1;
}

message CompleteShardRequest {
  // The shard_id to mark completed.
  string shard_id = 1;

  // The tree hash of the index being created. There can be multiple shards
  // with the same tree_hash.
  string tree_hash = 2;

  // The final size of the generated shard.
  uint64 size = 3;

  // The sha256 sum of the shard contents.
  bytes sha256 = 4;
}

message CompleteShardResponse {
}

message GetShardRequest {
  string shard_id = 1;
}

message GetShardResponse {
  Shard shard = 1;
}

message SearchShardsRequest {
  // If set only shards matching this tree hash will be returned.
  string tree_hash = 1;

  repeated Shard.State states = 2;
}

message SearchShardsResponse {
  // List of matching shard_ids.
  repeated string shard_ids = 1;
}

message GetRepoRequest {
  string repo_name = 1;
}

message GetRepoResponse {
  RepoRef default_ref = 1;
  repeated string refs = 2;
}

message GetRepoRefRequest {
  string repo_name = 1;
  string ref = 2;
}

message GetRepoRefResponse {
  RepoRef repo_ref = 1;
}

message ListRepoRefsRequest {
}

message ListRepoRefsResponse {
  repeated RepoRef repo_refs = 1;
}

message UpdateRepoShardRequest {
  // The name of the repository to update.
  string repo_name = 1;

  // The ref being updated.
  string ref = 2;

  // The commit hash of the revision (for detecting the need to index).
  string commit_hash = 3;

  // The shard_id to map to. Must be in the UNREFERENCED or REFERENCED state.
  string shard_id = 4;
}

message UpdateRepoShardResponse {
}

service IndexMetadataService {
  rpc AllocateShard(AllocateShardRequest) returns (AllocateShardResponse) {}
  rpc CompleteShard(CompleteShardRequest) returns (CompleteShardResponse) {}
  rpc GetShard(GetShardRequest) returns (GetShardResponse) {}
  rpc SearchShards(SearchShardsRequest) returns (SearchShardsResponse) {}

  rpc GetRepo(GetRepoRequest) returns (GetRepoResponse) {}
  rpc GetRepoRef(GetRepoRefRequest) returns (GetRepoRefResponse) {}
  rpc ListRepoRefs(ListRepoRefsRequest) returns (ListRepoRefsResponse) {}
  rpc UpdateRepoShard(UpdateRepoShardRequest) returns (UpdateRepoShardResponse) {}
}
