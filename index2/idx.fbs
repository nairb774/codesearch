struct GitHash {
  a: uint32;
  b: uint32;
  c: uint32;
  d: uint32;
  e: uint32;
}

struct Sha256 {
  a: uint32;
  b: uint32;
  c: uint32;
  d: uint32;

  e: uint32;
  f: uint32;
  g: uint32;
  h: uint32;
}

struct ByteRange {
  start: uint64;
  length: uint32;
}

enum DocType : byte {
  Regular = 0,
  Executable,
  Symlink
}

table Doc {
  path: string (required);
  range: ByteRange; // DocInner
  size: uint32;
  mod_ns: int64;
  type: DocType;
  // Only set, if top level raw is not set.
  sha256: Sha256;
}

table DocInner {
  hash: GitHash;

  // Maps the block number to the number of the line containing the first byte
  // of the block.
  block_to_line: [uint32];

  data: [ubyte];
}

table PostingList {
  docs: [ubyte] (required);
}

table PostingLists {
  // The length of `trigrams` and `lists*3` must be the same. Think of this as
  // a parallel map. The `trigram` values must be in sorted order.
  trigrams: [ubyte];
  lists: [PostingList];
  max_doc_id: uint32;
}

table IndexShard {
  docs: [Doc] (required); 
  lists: PostingLists (required);

  // If present, raw data is stored inline, and all files are stored without
  // sha256 hashes (would be redundant).
  raw: [ubyte];
}

// root_type IndexShard;
// file_identifier "IXS2";
